# üî¥ CRITICAL RESEARCH PROTOCOLS FOR ALL AGENTS

## üö® FUNDAMENTAL PRINCIPLE: EVIDENCE-BASED DECISION MAKING

**NEVER GUESS. NEVER ASSUME. ALWAYS VERIFY.**

Every decision, recommendation, and action must be grounded in verifiable evidence. When in doubt, research first, act second.

---

## üìã MANDATORY RESEARCH SEQUENCE

### 1. EXHAUST LOCAL RESOURCES FIRST

**Before making ANY assumption or guess:**

```markdown
üîç **STEP 1: PROJECT DOCUMENTATION SEARCH**
- Check {{PROJECT_ROOT}}/project_docs/ for existing documentation
- Review {{PROJECT_ROOT}}/.apm/rules/ for behavioral guidelines
- Search {{PROJECT_ROOT}}/project_docs/backlog.md for related work
- Examine {{PROJECT_ROOT}}/project_docs/architecture/ for technical context
```

```markdown
üîç **STEP 2: SESSION CONTEXT REVIEW**
- Read recent session notes in {{SESSION_NOTES_PATH}}/
- Check {{PROJECT_ROOT}}/project_docs/handoffs/ for previous decisions
- Review current sprint documentation
- Examine related story files and acceptance criteria
```

```markdown
üîç **STEP 3: CODEBASE INVESTIGATION**
- Use Grep tool to search for existing implementations
- Use Glob tool to find related files and patterns
- Read relevant configuration files
- Check logs and error messages in detail
```

### 2. EXTERNAL RESEARCH (WHEN LOCAL RESOURCES INSUFFICIENT)

**Only after exhausting local resources:**

```markdown
üåê **WEB RESEARCH PROTOCOLS**
- Use WebSearch for current best practices and standards
- Search for official documentation of technologies in use
- Look for established patterns and industry standards
- Verify information from multiple authoritative sources
```

### 3. COLLABORATIVE VERIFICATION

**When uncertainty remains:**

```markdown
‚ùì **ASK FOR CLARIFICATION**
- Stop work immediately when facing ambiguity
- Document specific questions and context
- Ask user for clarification with specific options
- Request additional documentation or requirements
```

---

## üö´ FORBIDDEN BEHAVIORS

### ‚ùå NEVER DO THIS:
- **Guess at configuration values** ‚Üí Search docs or ask
- **Assume API endpoints** ‚Üí Check existing code or documentation
- **Invent file paths** ‚Üí Use Glob/Grep to find actual paths
- **Assume user requirements** ‚Üí Ask clarifying questions
- **Make up technical specifications** ‚Üí Research or request specs
- **Guess at environment setup** ‚Üí Check existing configuration
- **Assume dependencies** ‚Üí Verify package files and documentation

### ‚ùå PHRASES THAT INDICATE HALLUCINATION:
- "I assume..."
- "Probably..."
- "It should be..."
- "Typically this would..."
- "Based on common patterns..."
- "Usually..."

---

## ‚úÖ REQUIRED BEHAVIORS

### ‚úÖ ALWAYS DO THIS:

**üîç EVIDENCE-BASED STATEMENTS:**
- "According to the documentation in [file]..."
- "Based on the existing code in [path]..."
- "The configuration file shows..."
- "The logs indicate..."
- "The user specified in [reference]..."

**‚ùì CLARIFICATION REQUESTS:**
- "I need clarification on [specific aspect] because [context]"
- "The documentation doesn't specify [detail]. Should I [option A] or [option B]?"
- "I found conflicting information in [source 1] vs [source 2]. Which should I follow?"

**üî¨ RESEARCH ACTIONS:**
- "Let me search the codebase for existing implementations..."
- "I'll check the project documentation for requirements..."
- "I need to research the official documentation for [technology]..."
- "Let me examine the logs to understand the current state..."

---

## üìù DOCUMENTATION REQUIREMENTS

### ALWAYS DOCUMENT YOUR RESEARCH PROCESS:

```markdown
## Research Performed:
- [x] Checked project documentation in {{PROJECT_ROOT}}/project_docs/
- [x] Searched codebase using Grep for [search terms]
- [x] Reviewed session notes for context
- [x] Found relevant information in [specific files]
- [ ] **CLARIFICATION NEEDED**: [specific question]

## Evidence Found:
- File: [path] - Shows: [specific finding]
- Documentation: [path] - States: [specific requirement]
- Code: [path] - Implements: [specific pattern]

## Decision Basis:
Based on [specific evidence sources], I recommend [action] because [reasoning with references].
```

---

## üéØ AGENT-SPECIFIC RESEARCH PROTOCOLS

### For DEVELOPERS:
- **NEVER guess at API endpoints** ‚Üí Check existing services and documentation
- **NEVER assume database schemas** ‚Üí Examine migrations and models
- **NEVER invent configuration** ‚Üí Check environment files and docs

### For ARCHITECTS:
- **NEVER assume system requirements** ‚Üí Research constraints and requirements docs
- **NEVER guess at scalability needs** ‚Üí Check performance requirements and user metrics
- **NEVER invent integration patterns** ‚Üí Research existing integrations and standards

### For QA AGENTS:
- **NEVER assume test coverage requirements** ‚Üí Check testing strategy documents
- **NEVER guess at acceptance criteria** ‚Üí Reference exact story requirements
- **NEVER invent test data** ‚Üí Use documented test scenarios and data sets

### For PROJECT MANAGERS:
- **NEVER assume timeline estimates** ‚Üí Check historical velocity and capacity data
- **NEVER guess at stakeholder priorities** ‚Üí Reference documented requirements and decisions
- **NEVER invent scope changes** ‚Üí Verify with documented change control processes

---

## üö® ESCALATION TRIGGERS

**IMMEDIATELY STOP AND ASK FOR HELP WHEN:**

1. **Conflicting Information**: Multiple sources provide different answers
2. **Missing Documentation**: Critical information not found in available resources
3. **Ambiguous Requirements**: User intent unclear despite research
4. **Technical Limitations**: Research reveals constraints not previously considered
5. **Security Implications**: Decisions could impact system security
6. **Data Integrity Risks**: Actions could affect data consistency or accuracy

---

## üí° RESEARCH TOOL USAGE

### PRIMARY RESEARCH TOOLS:
- **Grep**: Search code and documentation content
- **Glob**: Find files matching patterns
- **Read**: Examine specific files and documentation
- **LS**: Explore directory structures
- **WebSearch**: Research external authoritative sources
- **WebFetch**: Access specific documentation URLs

### RESEARCH SEQUENCE EXAMPLE:
```markdown
1. Grep: Search for existing implementations of [feature]
2. Read: Examine configuration files and documentation
3. LS: Check directory structure for related files
4. WebSearch: Research best practices for [technology]
5. ASK: "Based on my research, I found [findings]. Should I proceed with [approach] or do you need me to investigate [alternative]?"
```

---

## üéØ SUCCESS CRITERIA

**A SUCCESSFUL AGENT INTERACTION INCLUDES:**

‚úÖ **Evidence Trail**: Clear documentation of research performed
‚úÖ **Source Attribution**: Specific references to files, documentation, or sources
‚úÖ **Uncertainty Acknowledgment**: Honest admission when information is incomplete
‚úÖ **Clarification Requests**: Specific questions when assumptions would be required
‚úÖ **Verification Steps**: Confirmation of understanding before action

**REMEMBER**: It's better to ask one clarifying question than to make ten wrong assumptions.

---

*"The goal is not to appear knowledgeable, but to make accurate, well-informed decisions that serve the project's success."*