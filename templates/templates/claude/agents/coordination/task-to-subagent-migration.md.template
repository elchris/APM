# Task Tool to Native Sub-Agent Migration Guide

## Overview

This guide provides concrete patterns for converting Task-based parallel commands to native sub-agent coordination, achieving true parallelism and eliminating CLI crashes.

## Migration Principles

### From Sequential to Parallel
- **Old**: Task operations run sequentially despite "parallel" naming
- **New**: True concurrent execution with separate context windows

### From Shared Context to Isolated Context
- **Old**: All tasks share parent agent's memory and state
- **New**: Each sub-agent has independent context and capabilities

### From API Calls to Natural Language
- **Old**: Complex Task() function calls
- **New**: Simple natural language activation

## Migration Patterns

### 1. Simple Task Conversion

#### Before (Task-based)
```markdown
Task("Analyze the current sprint backlog")
Task("Identify high-priority stories")  
Task("Create development timeline")
```

#### After (Native Sub-Agent)
```markdown
I need three agents working in parallel:
1. I need an Analyst agent to analyze the current sprint backlog and identify technical dependencies
2. I need a Product Owner agent to prioritize stories by business value
3. I need a Project Manager agent to create a realistic development timeline

Please work independently and provide results when complete.
```

#### Benefits Achieved
- True parallelism: All agents work simultaneously
- Specialized context: Each agent has persona-specific knowledge
- Independent operation: No shared state conflicts

### 2. Complex Parallel Command Migration

#### Before: /parallel-sprint Command
```javascript
// Old Task-based implementation (sequential)
const tasks = [
  Task("Load sprint backlog and current capacity"),
  Task("Analyze story dependencies and complexity"),
  Task("Map technical architecture requirements"),
  Task("Create development stream assignments"),
  Task("Generate integration timeline")
];
```

#### After: Native Sub-Agent Implementation
```markdown
I need comprehensive sprint coordination with parallel analysis:

1. I need a Product Owner agent to:
   - Review the current sprint backlog
   - Assess story readiness and priorities
   - Identify any missing acceptance criteria
   - Confirm team capacity alignment

2. I need an Architect agent to:
   - Map technical dependencies between stories
   - Identify integration points and risks
   - Recommend development order based on architecture
   - Define shared interfaces needed

3. I need a Scrum Master agent to:
   - Analyze team capacity and velocity
   - Create parallel development streams
   - Plan synchronization points
   - Identify potential blockers

4. I need a QA agent to:
   - Plan testing approach for parallel development
   - Identify integration test requirements
   - Design continuous validation strategy
   - Plan acceptance test coordination

All agents should work simultaneously. Share critical findings that affect other streams.
Timeline: Complete analysis within 8 minutes.
```

#### Performance Comparison
- **Sequential Task Time**: 20-25 minutes
- **Parallel Sub-Agent Time**: 6-8 minutes
- **Speedup**: 3-4x improvement
- **Quality**: Better due to specialized agent expertise

### 3. QA Framework Migration

#### Before: /parallel-qa-framework
```javascript
const qaTasks = [
  Task("Create unit test strategy"),
  Task("Design integration test framework"),
  Task("Plan performance testing approach"),
  Task("Develop security test scenarios"),
  Task("Create test automation roadmap")
];
```

#### After: Native QA Sub-Agent Coordination
```markdown
I need comprehensive QA coverage using specialized QA agents:

1. I need a QA agent focused on unit testing to:
   - Design unit test strategy for all modules
   - Create test templates and patterns
   - Define coverage goals and metrics
   - Plan test-driven development approach

2. I need a QA agent specialized in integration testing to:
   - Map integration points between components
   - Design contract testing approach
   - Plan data flow validation
   - Create integration test automation

3. I need a QA agent expert in performance testing to:
   - Identify performance-critical paths
   - Design load and stress test scenarios
   - Plan performance benchmarking
   - Create performance monitoring strategy

4. I need a QA agent focused on security testing to:
   - Conduct security risk assessment
   - Design security test scenarios
   - Plan penetration testing approach
   - Create security validation framework

Work in parallel but coordinate on shared test data and environments.
```

### 4. Development Task Migration

#### Before: Parallel Development Tasks
```javascript
const devTasks = [
  Task("Implement user authentication module"),
  Task("Create API endpoint handlers"),
  Task("Build database schema and migrations"),
  Task("Create frontend components"),
  Task("Write comprehensive tests")
];
```

#### After: Parallel Developer Agents
```markdown
I need multiple Developer agents working on different aspects simultaneously:

1. I need a Backend Developer agent to:
   - Implement user authentication service
   - Include login, logout, token management
   - Add password reset functionality
   - Implement rate limiting and security

2. I need an API Developer agent to:
   - Create RESTful API endpoints
   - Implement request validation
   - Add error handling and logging
   - Create API documentation

3. I need a Database Developer agent to:
   - Design optimal database schema
   - Create migration scripts
   - Add indexes for performance
   - Plan data backup and recovery

4. I need a Frontend Developer agent to:
   - Create React components for auth UI
   - Implement form validation
   - Add responsive design
   - Create user feedback systems

5. I need a Testing Developer agent to:
   - Write unit tests for all modules
   - Create integration test suite
   - Add end-to-end test scenarios
   - Set up test automation pipeline

Coordinate on shared interfaces and data models. All agents work independently but sync on integration points.
```

## Command-Specific Migrations

### /parallel-sprint → Native Coordination
```markdown
## Old Command Structure
/parallel-sprint "Sprint 18 planning"

## New Native Approach
I need sprint coordination agents working in parallel:
1. SM agent: Overall sprint orchestration and timeline management
2. PO agent: Story prioritization and acceptance criteria validation  
3. Architect agent: Technical dependency mapping and integration planning
4. QA agent: Test strategy and quality gate planning for parallel development

Execute parallel sprint planning for Sprint 18 with focus on dependency resolution.
```

### /parallel-qa-framework → Native QA Coordination
```markdown
## Old Command Structure  
/parallel-qa-framework "Authentication module testing"

## New Native Approach
I need specialized QA agents for comprehensive authentication testing:
1. Unit Test QA: Design test cases for auth service components
2. Integration QA: Plan API and database integration testing
3. Security QA: Create security testing scenarios and penetration tests
4. Performance QA: Design load testing for authentication flows

Focus on authentication module with complete test coverage.
```

### /parallel-analysis → Native Investigation
```markdown
## Old Command Structure
/parallel-analysis "Performance bottleneck investigation"

## New Native Approach  
I need analytical agents investigating performance bottlenecks:
1. Performance Analyst: Profile application performance and identify bottlenecks
2. Code Analyst: Review code for optimization opportunities
3. Architecture Analyst: Evaluate system design for scalability issues
4. Database Analyst: Analyze database queries and indexing strategies

Investigate current performance issues and provide optimization recommendations.
```

## Migration Best Practices

### 1. Start with Clear Agent Roles
```markdown
❌ Bad: "I need an agent to help with the project"
✅ Good: "I need a Developer agent to implement the user authentication module with JWT tokens"
```

### 2. Specify Integration Points
```markdown
✅ Example:
"Agent 1: Create the auth service API
Agent 2: Create the frontend login form
Integration: Agent 2 uses API endpoints from Agent 1"
```

### 3. Set Appropriate Timeframes
```markdown
✅ Time Management:
- Simple tasks: 2-5 minutes
- Moderate tasks: 5-15 minutes  
- Complex tasks: 15-30 minutes
- Coordinated work: Allow extra time for sync
```

### 4. Plan Result Synthesis
```markdown
✅ Result Handling:
"When all agents complete, provide:
1. Summary of what each agent accomplished
2. Integration status between components
3. Any conflicts or issues resolved
4. Next steps for the combined work"
```

## Error Handling Migration

### Task-Based Error Handling (Limited)
```javascript
try {
  Task("Complex operation");
} catch (error) {
  // Handle task failure
  // All subsequent tasks blocked
}
```

### Native Sub-Agent Error Handling (Robust)
```markdown
I need resilient parallel processing:
1. Agent 1: Primary implementation
2. Agent 2: Alternative approach (if Agent 1 fails)
3. Agent 3: Integration and testing

If any agent encounters issues:
- Continue with remaining agents
- Collect partial results
- Provide recommendations for retry
- Maintain progress with successful agents
```

## Performance Optimization

### Parallel Agent Limits
```markdown
Optimal Performance Configuration:
- Maximum concurrent agents: 4-6 (avoid system overload)
- Stagger starts: 5-10 seconds apart if needed
- Monitor memory usage during execution
- Use timeouts to prevent hanging agents
```

### Resource Management
```markdown
Resource-Aware Deployment:
"I need 4 agents working efficiently:
1. Lightweight Agent: Quick analysis task (2-3 min)
2. Moderate Agent: Implementation task (8-10 min)
3. Heavy Agent: Complex processing (15-20 min)
4. Monitoring Agent: Track progress of others

Stagger Agent 3 start by 2 minutes to balance system load."
```

## Validation and Testing

### Migration Validation Checklist
- [ ] All agents spawn successfully (< 2 seconds each)
- [ ] True parallel execution confirmed (overlapping work)
- [ ] No CLI crashes during execution
- [ ] Results properly synthesized
- [ ] Performance improved over Task-based approach
- [ ] Error handling works for partial failures

### Performance Benchmarking
```markdown
Migration Success Metrics:
- Agent spawn time: < 2 seconds average
- Parallel execution: Confirmed by timestamps
- Performance gain: Minimum 3x speedup
- Quality maintained: All tests passing
- Stability: Zero crashes in 10 test runs
```

This migration guide provides the concrete patterns needed to move from Task-based sequential operations to true parallel native sub-agent coordination.