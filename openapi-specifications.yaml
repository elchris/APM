openapi: 3.0.3
info:
  title: E-Commerce Platform API
  description: |
    Comprehensive API for e-commerce platform covering user management, product catalog,
    shopping cart, order processing, and payment handling.
    
    ## Authentication
    This API uses JWT tokens for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your_jwt_token>
    ```
    
    ## Rate Limiting
    Rate limits vary by user tier:
    - Guest users: 1,000 requests/hour
    - Basic customers: 5,000 requests/hour  
    - Premium customers: 10,000 requests/hour
    - Business partners: 50,000 requests/hour
    
    ## Versioning
    This API uses URL path versioning. Current version is v2.
    Legacy v1 endpoints are deprecated and will be removed on June 30, 2024.
    
  version: 2.1.0
  contact:
    name: API Support
    url: https://docs.ecommerce.com/support
    email: api-support@ecommerce.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://ecommerce.com/terms

servers:
  - url: https://api.ecommerce.com/v2
    description: Production server
  - url: https://staging-api.ecommerce.com/v2
    description: Staging server
  - url: https://dev-api.ecommerce.com/v2
    description: Development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            examples:
              basic_registration:
                summary: Basic user registration
                value:
                  email: "user@example.com"
                  password: "SecurePass123!"
                  firstName: "John"
                  lastName: "Doe"
                  phoneNumber: "+1234567890"
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT tokens
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
                example: "refreshToken=abc123; HttpOnly; Secure; Path=/auth/refresh"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  # Product Endpoints
  /products:
    get:
      tags:
        - Products
      summary: List products
      description: Retrieve a paginated list of products with optional filtering
      operationId: listProducts
      security: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortParam'
        - name: category
          in: query
          description: Filter by category ID
          schema:
            type: string
            format: uuid
        - name: price_min
          in: query
          description: Minimum price filter
          schema:
            type: number
            format: decimal
            minimum: 0
        - name: price_max
          in: query
          description: Maximum price filter
          schema:
            type: number
            format: decimal
            minimum: 0
        - name: search
          in: query
          description: Search query for product name or description
          schema:
            type: string
            maxLength: 100
        - name: in_stock
          in: query
          description: Filter by stock availability
          schema:
            type: boolean
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/TooManyRequests'

    post:
      tags:
        - Products
      summary: Create a new product
      description: Create a new product (admin/vendor only)
      operationId: createProduct
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCreateWithImages'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get product details
      description: Retrieve detailed information about a specific product
      operationId: getProduct
      security: []
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

    put:
      tags:
        - Products
      summary: Update product
      description: Update product information (admin/vendor only)
      operationId: updateProduct
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Shopping Cart Endpoints
  /cart:
    get:
      tags:
        - Shopping Cart
      summary: Get user's shopping cart
      description: Retrieve the current user's shopping cart
      operationId: getCart
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags:
        - Shopping Cart
      summary: Clear shopping cart
      description: Remove all items from the user's cart
      operationId: clearCart
      responses:
        '204':
          description: Cart cleared successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  /cart/items:
    post:
      tags:
        - Shopping Cart
      summary: Add item to cart
      description: Add a product to the user's shopping cart
      operationId: addCartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemAdd'
      responses:
        '201':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /cart/items/{itemId}:
    put:
      tags:
        - Shopping Cart
      summary: Update cart item
      description: Update quantity of a cart item
      operationId: updateCartItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemUpdate'
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Shopping Cart
      summary: Remove cart item
      description: Remove an item from the shopping cart
      operationId: removeCartItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item removed from cart successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Order Endpoints
  /orders:
    get:
      tags:
        - Orders
      summary: Get user's orders
      description: Retrieve a list of the user's orders
      operationId: getUserOrders
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          description: Filter by order status
          schema:
            $ref: '#/components/schemas/OrderStatus'
        - name: date_from
          in: query
          description: Filter orders from this date
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          description: Filter orders to this date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Orders
      summary: Create order
      description: Create a new order from the user's cart
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order details
      description: Retrieve detailed information about a specific order
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Payment Endpoints
  /payments/intents:
    post:
      tags:
        - Payments
      summary: Create payment intent
      description: Create a payment intent for order processing
      operationId: createPaymentIntent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentIntentCreate'
      responses:
        '201':
          description: Payment intent created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /payments/{paymentId}/confirm:
    post:
      tags:
        - Payments
      summary: Confirm payment
      description: Confirm and process a payment
      operationId: confirmPayment
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentConfirm'
      responses:
        '200':
          description: Payment confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/PaymentRequired'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for partner integrations

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    SortParam:
      name: sort
      in: query
      description: Sort field and direction
      schema:
        type: string
        enum: [name_asc, name_desc, price_asc, price_desc, created_asc, created_desc]
        default: created_desc

  schemas:
    # User and Authentication Schemas
    UserRegistration:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]'
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        phoneNumber:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        dateOfBirth:
          type: string
          format: date
        marketingConsent:
          type: boolean
          default: false

    UserRegistrationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            userId:
              type: string
              format: uuid
            email:
              type: string
              format: email
            emailVerificationRequired:
              type: boolean
        meta:
          type: object
          properties:
            verificationEmailSent:
              type: boolean

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        rememberMe:
          type: boolean
          default: false

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            accessToken:
              type: string
              description: JWT access token (expires in 15 minutes)
            refreshToken:
              type: string
              description: Refresh token (expires in 7 days)
            expiresIn:
              type: integer
              description: Access token expiration time in seconds
              example: 900
            user:
              $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        tier:
          $ref: '#/components/schemas/UserTier'
        isEmailVerified:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserRole:
      type: string
      enum: [guest, customer, premium_customer, vendor, admin, moderator]

    UserTier:
      type: string
      enum: [basic, premium, vip]

    # Product Schemas
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 2000
        shortDescription:
          type: string
          maxLength: 500
        sku:
          type: string
          maxLength: 50
        price:
          type: number
          format: decimal
          minimum: 0
        compareAtPrice:
          type: number
          format: decimal
          minimum: 0
        category:
          $ref: '#/components/schemas/Category'
        brand:
          type: string
          maxLength: 100
        weight:
          type: number
          format: decimal
          minimum: 0
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
        inventory:
          $ref: '#/components/schemas/InventoryInfo'
        seo:
          $ref: '#/components/schemas/SEOData'
        status:
          $ref: '#/components/schemas/ProductStatus'
        isDigital:
          type: boolean
          default: false
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductDetail:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            reviews:
              $ref: '#/components/schemas/ProductReviews'
            relatedProducts:
              type: array
              items:
                $ref: '#/components/schemas/Product'
            specifications:
              type: object
              additionalProperties:
                type: string

    ProductCreate:
      type: object
      required:
        - name
        - description
        - price
        - categoryId
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 2000
        shortDescription:
          type: string
          maxLength: 500
        sku:
          type: string
          maxLength: 50
        price:
          type: number
          format: decimal
          minimum: 0
        compareAtPrice:
          type: number
          format: decimal
          minimum: 0
        categoryId:
          type: string
          format: uuid
        brand:
          type: string
          maxLength: 100
        weight:
          type: number
          format: decimal
          minimum: 0
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        inventory:
          $ref: '#/components/schemas/InventoryInput'
        seo:
          $ref: '#/components/schemas/SEOData'
        isDigital:
          type: boolean
          default: false
        tags:
          type: array
          items:
            type: string

    ProductCreateWithImages:
      allOf:
        - $ref: '#/components/schemas/ProductCreate'
        - type: object
          properties:
            images:
              type: array
              items:
                type: string
                format: binary

    ProductUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 2000
        shortDescription:
          type: string
          maxLength: 500
        price:
          type: number
          format: decimal
          minimum: 0
        compareAtPrice:
          type: number
          format: decimal
          minimum: 0
        categoryId:
          type: string
          format: uuid
        brand:
          type: string
          maxLength: 100
        status:
          $ref: '#/components/schemas/ProductStatus'
        tags:
          type: array
          items:
            type: string

    ProductListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        parentId:
          type: string
          format: uuid
        level:
          type: integer
        imageUrl:
          type: string
          format: uri

    ProductImage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
          format: uri
        altText:
          type: string
        position:
          type: integer
        isMain:
          type: boolean

    ProductVariant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        sku:
          type: string
        price:
          type: number
          format: decimal
        compareAtPrice:
          type: number
          format: decimal
        inventory:
          $ref: '#/components/schemas/InventoryInfo'
        options:
          type: object
          additionalProperties:
            type: string

    ProductStatus:
      type: string
      enum: [draft, active, archived, out_of_stock]

    Dimensions:
      type: object
      properties:
        length:
          type: number
          format: decimal
        width:
          type: number
          format: decimal
        height:
          type: number
          format: decimal
        unit:
          type: string
          enum: [cm, in]

    InventoryInfo:
      type: object
      properties:
        quantity:
          type: integer
          minimum: 0
        reserved:
          type: integer
          minimum: 0
        available:
          type: integer
          minimum: 0
        lowStockThreshold:
          type: integer
          minimum: 0
        trackQuantity:
          type: boolean

    InventoryInput:
      type: object
      properties:
        quantity:
          type: integer
          minimum: 0
        lowStockThreshold:
          type: integer
          minimum: 0
        trackQuantity:
          type: boolean
          default: true

    SEOData:
      type: object
      properties:
        metaTitle:
          type: string
          maxLength: 60
        metaDescription:
          type: string
          maxLength: 160
        keywords:
          type: array
          items:
            type: string

    ProductReviews:
      type: object
      properties:
        averageRating:
          type: number
          format: decimal
          minimum: 0
          maximum: 5
        totalReviews:
          type: integer
          minimum: 0
        ratingDistribution:
          type: object
          properties:
            5:
              type: integer
            4:
              type: integer
            3:
              type: integer
            2:
              type: integer
            1:
              type: integer
        recentReviews:
          type: array
          items:
            $ref: '#/components/schemas/ProductReview'

    ProductReview:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        userName:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        title:
          type: string
        content:
          type: string
        isVerifiedPurchase:
          type: boolean
        helpfulCount:
          type: integer
        createdAt:
          type: string
          format: date-time

    # Shopping Cart Schemas
    Cart:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        subtotal:
          type: number
          format: decimal
        totalItems:
          type: integer
        estimatedTax:
          type: number
          format: decimal
        estimatedShipping:
          type: number
          format: decimal
        estimatedTotal:
          type: number
          format: decimal
        currency:
          type: string
          example: USD
        lastUpdated:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time

    CartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        variantId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
        unitPrice:
          type: number
          format: decimal
        totalPrice:
          type: number
          format: decimal
        product:
          $ref: '#/components/schemas/CartItemProduct'
        addedAt:
          type: string
          format: date-time

    CartItemProduct:
      type: object
      properties:
        name:
          type: string
        sku:
          type: string
        imageUrl:
          type: string
          format: uri
        variant:
          type: object
          properties:
            options:
              type: object
              additionalProperties:
                type: string

    CartItemAdd:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
        variantId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
          maximum: 10

    CartItemUpdate:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          minimum: 1
          maximum: 10

    # Order Schemas
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderNumber:
          type: string
        userId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/OrderStatus'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        subtotal:
          type: number
          format: decimal
        taxAmount:
          type: number
          format: decimal
        shippingAmount:
          type: number
          format: decimal
        discountAmount:
          type: number
          format: decimal
        totalAmount:
          type: number
          format: decimal
        currency:
          type: string
          example: USD
        paymentStatus:
          $ref: '#/components/schemas/PaymentStatus'
        shippingMethod:
          $ref: '#/components/schemas/ShippingMethod'
        trackingNumber:
          type: string
        estimatedDelivery:
          type: string
          format: date
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderDetail:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            timeline:
              type: array
              items:
                $ref: '#/components/schemas/OrderEvent'
            refunds:
              type: array
              items:
                $ref: '#/components/schemas/Refund'

    OrderCreate:
      type: object
      required:
        - shippingAddressId
        - paymentMethodId
      properties:
        shippingAddressId:
          type: string
          format: uuid
        billingAddressId:
          type: string
          format: uuid
        paymentMethodId:
          type: string
        shippingMethodId:
          type: string
        notes:
          type: string
          maxLength: 500
        promoCode:
          type: string

    OrderListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    OrderStatus:
      type: string
      enum: 
        - pending
        - confirmed
        - processing
        - shipped
        - delivered
        - cancelled
        - returned
        - refunded

    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        variantId:
          type: string
          format: uuid
        productName:
          type: string
        sku:
          type: string
        quantity:
          type: integer
        unitPrice:
          type: number
          format: decimal
        totalPrice:
          type: number
          format: decimal
        productSnapshot:
          type: object
          description: Product details at time of purchase

    OrderEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [created, confirmed, shipped, delivered, cancelled, returned]
        description:
          type: string
        timestamp:
          type: string
          format: date-time
        metadata:
          type: object

    # Payment Schemas
    PaymentIntentCreate:
      type: object
      required:
        - orderId
        - amount
        - currency
      properties:
        orderId:
          type: string
          format: uuid
        amount:
          type: integer
          description: Amount in smallest currency unit (cents)
          minimum: 1
        currency:
          type: string
          example: USD
        paymentMethods:
          type: array
          items:
            type: string
            enum: [card, paypal, apple_pay, google_pay]
        returnUrl:
          type: string
          format: uri
        description:
          type: string

    PaymentIntent:
      type: object
      properties:
        id:
          type: string
        clientSecret:
          type: string
        status:
          type: string
          enum: [requires_payment_method, requires_confirmation, requires_action, processing, succeeded, canceled]
        amount:
          type: integer
        currency:
          type: string
        orderId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    PaymentConfirm:
      type: object
      required:
        - paymentMethodId
      properties:
        paymentMethodId:
          type: string
        returnUrl:
          type: string
          format: uri
        savePaymentMethod:
          type: boolean
          default: false

    PaymentResult:
      type: object
      properties:
        success:
          type: boolean
        status:
          type: string
        transactionId:
          type: string
        amount:
          type: integer
        currency:
          type: string
        nextAction:
          type: object
          properties:
            type:
              type: string
            redirectUrl:
              type: string
              format: uri

    PaymentStatus:
      type: string
      enum: [pending, processing, completed, failed, cancelled, refunded, partially_refunded]

    Refund:
      type: object
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: number
          format: decimal
        reason:
          type: string
        status:
          type: string
          enum: [pending, completed, failed]
        createdAt:
          type: string
          format: date-time

    # Common Schemas
    Address:
      type: object
      required:
        - firstName
        - lastName
        - address1
        - city
        - country
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        company:
          type: string
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
          minLength: 2
          maxLength: 2
        phoneNumber:
          type: string
        isDefault:
          type: boolean
          default: false

    ShippingMethod:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: decimal
        estimatedDays:
          type: integer
        carrier:
          type: string

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        pages:
          type: integer
          example: 8
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid input data
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
            requestId:
              type: string
              format: uuid

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            validation_error:
              summary: Validation error
              value:
                success: false
                error:
                  code: VALIDATION_ERROR
                  message: Invalid input data
                  details:
                    - field: email
                      message: Invalid email format
                    - field: password
                      message: Password must be at least 8 characters

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid_token:
              summary: Invalid or expired token
              value:
                success: false
                error:
                  code: INVALID_TOKEN
                  message: Invalid or expired authentication token

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            insufficient_permissions:
              summary: Insufficient permissions
              value:
                success: false
                error:
                  code: INSUFFICIENT_PERMISSIONS
                  message: You don't have permission to access this resource

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            resource_not_found:
              summary: Resource not found
              value:
                success: false
                error:
                  code: RESOURCE_NOT_FOUND
                  message: The requested resource was not found

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            duplicate_resource:
              summary: Duplicate resource
              value:
                success: false
                error:
                  code: DUPLICATE_RESOURCE
                  message: A user with this email already exists

    UnprocessableEntity:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            business_rule_violation:
              summary: Business rule violation
              value:
                success: false
                error:
                  code: BUSINESS_RULE_VIOLATION
                  message: Insufficient inventory for requested quantity

    TooManyRequests:
      description: Too many requests
      headers:
        Retry-After:
          description: Number of seconds to wait before making another request
          schema:
            type: integer
        X-RateLimit-Limit:
          description: Request limit per time window
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: Remaining requests in current window
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Time when rate limit resets (Unix timestamp)
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            rate_limit_exceeded:
              summary: Rate limit exceeded
              value:
                success: false
                error:
                  code: RATE_LIMIT_EXCEEDED
                  message: Rate limit exceeded. Please try again later.

    PaymentRequired:
      description: Payment required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            payment_failed:
              summary: Payment failed
              value:
                success: false
                error:
                  code: PAYMENT_FAILED
                  message: Payment could not be processed

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Products
    description: Product catalog management
  - name: Shopping Cart
    description: Shopping cart operations
  - name: Orders
    description: Order management
  - name: Payments
    description: Payment processing